import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { FaBug } from 'react-icons/fa';
import { supabase } from '../../utils/supabase';
import { useAuth } from '../../context/AuthContext';
import { toast } from 'react-hot-toast';

// Import components
import MessageHeader from './messages/MessageHeader';
import MessageInput from './messages/MessageInput';
import MessageList from './messages/MessageList';
import MessageThreadList from './messages/MessageThreadList';
import DebugPanel from './messages/DebugPanel';

// Import types
import { Message, MessageProps, MessageThread, ReceiverInfo } from './messages/types';

// Re-export types
export type { Message as MessageType, MessageProps } from './messages/types';

type DebugInfo = {
  authLoading: boolean;
  hasAuthUser: boolean;
  userId: string | null;
  error: string | null;
};

const MessageComponent: React.FC<MessageProps> = ({
  orderId,
  receiverId,
  isDriver,
  onClose
}) => {
  // State management
  const [messages, setMessages] = useState<Message[]>([]);
  const [threads, setThreads] = useState<MessageThread[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isSending, setIsSending] = useState(false);
  const [showDebug, setShowDebug] = useState(false);
  const [receiverInfo, setReceiverInfo] = useState<ReceiverInfo>({ name: 'Loading...' });
  
  // Refs and hooks
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { user: authUser, loading: authLoading } = useAuth();
  const { t } = useTranslation();

  // Load messages for a thread
  const loadMessages = useCallback(async (threadId: string) => {
    try {
      setIsLoading(true);
      setError(null);
      // TODO: Implement actual message loading from your API
      // const { data, error } = await supabase...
      // if (error) throw error;
      // setMessages(data || []);
    } catch (err) {
      console.error('Error loading messages:', err);
      setError(t('messages.errorLoadingMessages'));
    } finally {
      setIsLoading(false);
    }
  }, [t]);

  // Handle thread selection
  const handleSelectThread = useCallback((thread: MessageThread) => {
    loadMessages(thread.order.id);
  }, [loadMessages]);

  // Load initial threads
  useEffect(() => {
    const loadThreads = async () => {
      try {
        setIsLoading(true);
        setError(null);
        // TODO: Implement actual thread loading from your API
        // const { data, error } = await supabase...
        // if (error) throw error;
        // setThreads(data || []);
      } catch (err) {
        console.error('Error loading threads:', err);
        setError(t('messages.errorLoadingThreads'));
      } finally {
        setIsLoading(false);
      }
    };

    loadThreads();
  }, [t]);

  // Handle sending a new message
  const handleSendMessage = useCallback(async (messageText: string) => {
    if (!messageText.trim() || !authUser?.id || !orderId || !receiverId) {
      console.warn('Cannot send message - missing required data');
      return;
    }

    try {
      setIsSending(true);

      const { data, error } = await supabase
        .from('messages')
        .insert([{
          order_id: orderId,
          sender_id: authUser.id,
          receiver_id: receiverId,
          message: messageText,
          read: false,
        }])
        .select();

      if (error) throw error;
      
      // Update local state with the new message
      if (data?.[0]) {
        setMessages(prev => [...prev, data[0]]);
      }
    } catch (err) {
      console.error('Error sending message:', err);
      toast.error(t('messages.errorSendingMessage'));
    } finally {
      setIsSending(false);
    }
  }, [authUser?.id, orderId, receiverId, t]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Handle escape key to close modal
  useEffect(() => {
    const handleEscapeKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    window.addEventListener('keydown', handleEscapeKey);
    return () => window.removeEventListener('keydown', handleEscapeKey);
  }, [onClose]);

  // Debug panel toggle
  const toggleDebug = useCallback(() => setShowDebug(prev => !prev), []);

  // Debug info
  const debugInfo: DebugInfo = {
    authLoading: authLoading || false,
    hasAuthUser: !!authUser,
    userId: authUser?.id || null,
    error: error,
  };

  return (
    <div className="flex flex-col h-screen bg-white dark:bg-stone-900 text-gray-800 dark:text-gray-200">
      {/* Debug toggle button */}
      <button
        onClick={toggleDebug}
        className="fixed bottom-4 right-4 z-50 p-2 bg-purple-600 text-white rounded-full shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
        aria-label="Toggle debug panel"
      >
        <FaBug />
      </button>

      {/* Debug panel */}
      {showDebug && (
        <DebugPanel
          onClose={() => setShowDebug(false)}
          debugInfo={debugInfo}
        />
      )}

      <MessageHeader 
        onClose={onClose} 
        receiverInfo={receiverInfo}
        isDriver={isDriver}
        onToggleDebug={toggleDebug}
      />

      <div className="flex-1 overflow-hidden flex">
        {/* Thread list */}
        <MessageThreadList
          threads={threads}
          onSelectThread={handleSelectThread}
          isLoading={isLoading}
          error={error}
        />

        {/* Main chat area */}
        <div className="flex-1 flex flex-col">
          <MessageList
            messages={messages}
            currentUserId={authUser?.id}
            isLoading={isLoading}
            error={error}
          />

          <MessageInput
            onSend={handleSendMessage}
            isSending={isSending}
          />
          <div ref={messagesEndRef} />
        </div>
      </div>
    </div>
  );
};

export default MessageComponent;
