import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  FaBox, FaArrowRight, FaWallet, FaMoneyBillWave,
  FaArrowUp, FaArrowDown, FaExchangeAlt, 
  FaMapMarkerAlt, FaPlus, FaFire, FaCoins
} from 'react-icons/fa';
import OrderDetailsView from '../shared/OrderDetailsView';
import { Link, useNavigate } from 'react-router-dom';
import { supabase } from '../../utils/supabase';
import { toast } from 'react-hot-toast';
import { useAuth } from '../../context/AuthContext';
import { OrderStatus } from './orders/types';

interface Transaction {
  id: string | number;
  type: 'deposit' | 'withdrawal' | 'payment' | 'earnings';
  amount: number;
  date: string;
  description: string | null;
  status?: 'pending' | 'completed' | 'failed';
  wallet_id?: string;
  created_at?: string;
}

interface Order {
  id: string;
  user_id: string;
  service_id: string;
  pickup_location: string;
  dropoff_location: string;
  status: OrderStatus;
  estimated_price: number;
  actual_price?: number;
  created_at: string;
  payment_method?: 'wallet' | 'cash';
  services?: {
    id: string;
    name: string;
    [key: string]: any;
  };
}

interface WalletData {
  balance: number;
  transactions: Transaction[];
}

const DashIndex = () => {
  const { user, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const [walletData, setWalletData] = useState<WalletData | null>(null);
  const [isLoadingWallet, setIsLoadingWallet] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [recentOrders, setRecentOrders] = useState<Order[]>([]);
  const [isLoadingOrders, setIsLoadingOrders] = useState(true);
  
  // Order details modal state
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [isOrderModalOpen, setIsOrderModalOpen] = useState(false);

  // Function to get status color classes
  const getStatusClasses = (status: OrderStatus) => {
    switch (status) {
      case OrderStatus.PENDING:
        return 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300';
      case OrderStatus.ACCEPTED:
        return 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300';
      case OrderStatus.IN_TRANSIT:
        return 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300';
      case OrderStatus.COMPLETED:
        return 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300';
      case OrderStatus.CANCELLED:
        return 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300';
      default:
        return 'bg-gray-100 dark:bg-gray-900/30 text-gray-800 dark:text-gray-300';
    }
  };

  // Format relative date for orders
  const formatRelativeDate = (dateString: string): string => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffInDays === 0) return 'Today';
    if (diffInDays === 1) return 'Yesterday';
    
    // Format date as MMM DD (e.g., Mar 20)
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
  };

  useEffect(() => {
    const fetchWalletBalance = async () => {
      try {
        setIsLoading(true);
        setError(null);
        
        // Check authentication from context
        if (!isAuthenticated || !user) {
          setError('User not authenticated. Please log in again.');
          setIsLoading(false);
          return;
        }
        
        // User is authenticated, fetch wallet data
        const userId = user.id;
        
        try {
          // Direct Supabase query for wallet data - simpler approach
          const { data, error } = await supabase
            .from('wallets')
            .select('*')
            .eq('user_id', userId)
            .limit(1)
            .maybeSingle();
          
          if (error) {
            console.error('Error fetching wallet:', error);
            throw new Error(`Failed to fetch wallet: ${error.message}`);
          }
          
          console.log('Wallet data from Supabase:', data);
          
          if (data) {
            // Wallet found
            setWalletData(prevData => ({
              ...prevData,
              balance: data.balance || 0
            }));
            
            // Fetch recent transactions
            fetchRecentTransactions(userId);
          } else {
            // No wallet found - create one
            console.log('No wallet found, creating new wallet for user', userId);
            
            const { data: newWallet, error: createError } = await supabase
              .from('wallets')
              .insert({
                user_id: userId,
                balance: 0,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              })
              .select()
              .single();
            
            if (createError) {
              console.error('Error creating wallet:', createError);
              throw new Error(`Failed to create wallet: ${createError.message}`);
            }
            
            console.log('Wallet created successfully:', newWallet);
            
            if (newWallet) {
              setWalletData(prevData => ({
                ...prevData,
                balance: newWallet.balance || 0
              }));
              
              toast.success('Wallet created successfully!');
              // Also fetch recent transactions if wallet was created successfully
              fetchRecentTransactions(userId);
            } else {
              setError('Failed to create wallet: No wallet data returned');
            }
          }
        } catch (dbErr) {
          console.error('Database operation failed:', dbErr);
          setError(`Database error: ${(dbErr as Error).message || 'Unknown error'}`);
        }
      } catch (err) {
        console.error('Unexpected error:', err);
        setError(`An unexpected error occurred: ${(err as Error).message || 'Please refresh and try again.'}`);
      } finally {
        setIsLoading(false);
      }
    };
    
    const fetchRecentTransactions = async (userId: string) => {
      try {
        // Use the actual logged-in user ID for real data
        // Get the wallet_id for the user
        const { data: walletData, error: walletError } = await supabase
          .from('wallets')
          .select('id')
          .eq('user_id', userId)
          .maybeSingle();
          
        if (walletError) {
          console.error('Error fetching wallet ID:', walletError);
          return;
        }
        
        if (!walletData) {
          console.log('No wallet found for user');
          return;
        }
        
        const walletId = walletData.id;
        
        // Fetch transactions from the wallet_transactions table
        const { data: transactions, error: txError } = await supabase
          .from('wallet_transactions')
          .select('id, type, amount, transaction_date, created_at, description, status, wallet_id, metadata')
          .eq('wallet_id', walletId)
          .order('created_at', { ascending: false })
          .limit(5);
        
        if (txError) {
          console.error('Error fetching transactions:', txError);
          return;
        }
        
        if (transactions && transactions.length > 0) {
          updateTransactionState(transactions);
        } else {
          console.log('No transactions found for wallet ID:', walletId);
        }
      } catch (err) {
        console.error('Error in transaction fetch function:', err);
      }
      
      // Helper function to update transaction state with fetched data
      function updateTransactionState(data: any[]) {
        const formattedTransactions = data.map(tx => ({
          id: tx.id,
          type: tx.type || 'payment',
          amount: tx.amount,
          // Use transaction_date if available, otherwise fall back to created_at
          date: formatRelativeDate(tx.transaction_date || tx.created_at),
          description: tx.description || 'Transaction',
          status: tx.status || 'completed',
          wallet_id: tx.wallet_id,
          created_at: tx.created_at
        }));
        
        console.log('Formatted transactions:', formattedTransactions);
        
        setWalletData(prevData => ({
          ...prevData,
          transactions: formattedTransactions
        }));
      }
    };
    
    if (isAuthenticated) {
      fetchWalletBalance();
      fetchRecentOrders();
    }
  }, [isAuthenticated]);

  // Function to fetch orders that haven't been completed yet
  const fetchRecentOrders = async () => {
    try {
      setIsLoadingOrders(true);
      
      // Get the currently authenticated user or fallback to ID 2
      const { data: { user } } = await supabase.auth.getUser();
      const userId = user?.id || "2"; // Use authenticated user ID if available, or fallback to ID 2
      
      console.log('Fetching non-completed orders for user:', userId);
      
      // Define statuses we want to exclude (COMPLETED and CANCELLED)
      const excludedStatuses = [OrderStatus.COMPLETED, OrderStatus.CANCELLED];
      
      // First query: Get active orders (orders in progress)
      const { data, error } = await supabase
        .from('orders')
        .select('*, services(id, name)')
        .eq('user_id', userId)
        .not('status', 'in', `(${excludedStatuses.join(',')})`)
        .order('created_at', { ascending: false })
        .limit(5); // Increased limit to show more active orders
        
      if (error) {
        console.error('Error fetching non-completed orders:', error);
        return;
      }
      
      if (data && data.length > 0) {
        console.log(`${data.length} in-progress orders found for user ${userId}`);
        setRecentOrders(data);
      } else {
        console.log('No in-progress orders found, fetching recent orders instead');
        
        // Fallback to recent orders if no active ones
        const { data: recentData, error: recentError } = await supabase
          .from('orders')
          .select('*, services(id, name)')
          .eq('user_id', userId)
          .order('created_at', { ascending: false })
          .limit(3);
          
        if (!recentError && recentData) {
          setRecentOrders(recentData);
        } else if (recentError) {
          console.error('Error fetching recent orders:', recentError);
        }
      }
    } catch (err) {
      console.error('Error in orders fetch function:', err);
    } finally {
      setIsLoadingOrders(false);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'EUR',
      minimumFractionDigits: 2
    }).format(amount);
  };

  const getTransactionIcon = (type: string) => {
    switch (type) {
      case 'deposit':
        return <FaArrowDown className="text-green-500 dark:text-green-400" />;
      case 'withdrawal':
        return <FaArrowUp className="text-red-500 dark:text-red-400" />;
      case 'payment':
        return <FaExchangeAlt className="text-purple-500 dark:text-purple-400" />;
      case 'earnings':
        return <FaMoneyBillWave className="text-blue-500 dark:text-blue-400" />;
      default:
        return <FaExchangeAlt className="text-gray-500 dark:text-gray-400" />;
    }
  };

  // These functions were removed as they're no longer needed with the simplified UI

  return (
    <div className="space-y-6 px-4 sm:px-6 md:px-0">
      {/* Wallet Overview */}
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white dark:bg-midnight-800 rounded-xl shadow-md border border-gray-100 dark:border-stone-700/10 overflow-hidden"
      >
        <div className="flex flex-col md:flex-row">
          
            <div className="p-6 md:w-1/3 bg-gradient-to-br from-purple-900/90 via-slate-900 to-midnight-900 flex flex-col justify-between border-r border-gray-100 dark:border-stone-700/10 relative overflow-hidden">
              {/* Decorative elements */}
              <div className="absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-purple-500/20 to-transparent rounded-full -mr-10 -mt-10"></div>
              <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-tr from-purple-500/10 to-transparent rounded-full -ml-6 -mb-6"></div>
              
              <div className="relative z-10">
                <div className="flex items-center gap-2 mb-3">
                  <div className="w-7 h-7 rounded-full bg-gradient-to-r from-purple-500 to-purple-700 flex items-center justify-center shadow-lg">
                    <FaWallet className="text-white text-xs" />
                  </div>
                  <h2 className="text-base font-semibold text-white">My Wallet</h2>
                </div>
                
                {isLoading ? (
                  <div className="animate-pulse">
                    <div className="h-8 w-32 bg-white/20 rounded mb-2"></div>
                    <div className="h-3 w-24 bg-white/10 rounded"></div>
                  </div>
                ) : error ? (
                  <div className="text-red-300 mb-2">
                    <p className="text-sm">Unable to load balance</p>
                  </div>
                ) : (
                  <>
                    <div className="text-2xl font-bold text-white mb-1">
                      {formatCurrency(walletData.balance)}
                    </div>
                    <p className="text-xs text-purple-200/80 mb-4">Available balance</p>
                  </>
                )}
                
                <div className="mt-6 flex space-x-2">
                  <Link 
                    to="/dashboard/wallet" 
                    className="inline-block px-4 py-2 bg-white/10 hover:bg-white/20 text-white text-xs font-medium rounded-lg flex items-center gap-2 transition-colors backdrop-blur-sm w-fit border border-white/5"
                  >
                    <FaWallet className="text-xs" />
                    <span>Manage</span>
                  </Link>
                  <Link 
                    to="/dashboard/wallet/add" 
                    className="inline-block px-4 py-2 bg-gradient-to-r from-purple-500 to-purple-700 hover:from-purple-600 hover:to-purple-800 text-white text-xs font-medium rounded-lg flex items-center gap-2 transition-colors shadow-lg w-fit"
                  >
                    <FaPlus className="text-xs" />
                    <span>Add Money</span>
                  </Link>
                </div>
              </div>
            </div>
            
            {/* Recent Transactions */}
            <div className="p-4 md:w-2/3">
              <div className="flex justify-between items-center mb-3">
                <h2 className="text-base font-semibold text-gray-900 dark:text-white">Recent Transactions</h2>
                <Link 
                  to="/dashboard/wallet" 
                  className="text-xs text-purple-600 hover:text-purple-700 flex items-center gap-1 transition-colors"
                >
                  View All
                  <FaArrowRight className="text-[10px]" />
                </Link>
              </div>
              
              <div className="space-y-2 dark:space-y-3">
                {isLoading ? (
                  Array(2).fill(0).map((_, idx) => (
                    <div key={idx} className="animate-pulse flex items-center justify-between p-2 border border-gray-100 dark:border-stone-700/10 rounded-lg shadow-sm">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 rounded-lg bg-gray-200 dark:bg-midnight-700"></div>
                        <div>
                          <div className="h-3 w-16 bg-gray-200 dark:bg-midnight-700 rounded mb-1"></div>
                          <div className="h-2 w-24 bg-gray-200 dark:bg-midnight-700 rounded mb-1"></div>
                        </div>
                      </div>
                      <div className="h-3 w-14 bg-gray-200 dark:bg-midnight-700 rounded"></div>
                    </div>
                  ))
                ) : walletData.transactions.length === 0 ? (
                  <div className="text-center py-3">
                    <p className="text-sm text-gray-500 dark:text-stone-400">No transactions yet</p>
                  </div>
                ) : (
                  walletData.transactions.slice(0, 3).map(transaction => (
                    <div 
                      key={transaction.id}
                      className="flex items-center justify-between p-2 border border-gray-100 dark:border-stone-700/10 rounded-lg hover:bg-gray-50 dark:hover:bg-midnight-700/30 transition-colors shadow-sm"
                    >
                      <div className="flex items-center gap-2">
                        <div className="w-8 h-8 rounded-lg bg-gray-50 dark:bg-midnight-700 flex items-center justify-center">
                          {getTransactionIcon(transaction.type)}
                        </div>

                        <div className="min-w-0">
                          <p className="text-xs font-medium text-gray-900 dark:text-white capitalize">{transaction.type}</p>
                          <p className="text-[10px] text-gray-500 dark:text-stone-400 truncate">{transaction.date}</p>
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <p className={`text-xs font-medium ${
                          transaction.type === 'deposit' 
                            ? 'text-green-600 dark:text-green-400' 
                            : transaction.type === 'payment' 
                              ? 'text-purple-600 dark:text-purple-400'
                              : 'text-red-600 dark:text-red-400'
                        }`}>
                          {transaction.type === 'deposit' ? '+' : '-'}
                          {formatCurrency(transaction.amount)}
                        </p>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </motion.div>
        
        {/* Recent Orders */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0, transition: { delay: 0.3 } }}
          className="bg-white dark:bg-midnight-800 rounded-xl shadow-md border border-gray-100 dark:border-stone-700/10 overflow-hidden mt-4"
        >
          <div className="flex justify-between items-center p-4 border-b border-gray-100 dark:border-stone-700/10">
            <div className="flex items-center gap-2">
              <div className="w-6 h-6 rounded-full bg-gradient-to-r from-purple-500 to-purple-700 flex items-center justify-center shadow-sm">
                <FaBox className="text-white text-xs" />
              </div>
              <h2 className="text-base font-semibold text-gray-900 dark:text-white">In Progress Orders</h2>
            </div>
            <Link 
              to="/dashboard/orders" 
              className="text-xs px-3 py-1 rounded-full bg-purple-100 dark:bg-purple-900/20 text-purple-600 dark:text-purple-300 hover:bg-purple-200 dark:hover:bg-purple-900/30 flex items-center gap-1 transition-colors"
            >
              View All
              <FaArrowRight className="text-[10px]" />
            </Link>
          </div>
          
          <div className="p-2">
            {isLoadingOrders ? (
              Array.from({ length: 2 }).map((_, idx) => (
                <div key={idx} className="p-3 m-2 animate-pulse rounded-xl bg-gray-50 dark:bg-midnight-700/20 border border-gray-100 dark:border-stone-700/10">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 rounded-lg bg-gray-200 dark:bg-midnight-700"></div>
                      <div>
                        <div className="h-3.5 w-32 bg-gray-200 dark:bg-midnight-700 rounded mb-2"></div>
                        <div className="h-2.5 w-24 bg-gray-200 dark:bg-midnight-700 rounded"></div>
                      </div>
                    </div>
                    <div className="flex flex-col items-end">
                      <div className="h-4 w-16 bg-gray-200 dark:bg-midnight-700 rounded-full mb-2"></div>
                      <div className="h-2.5 w-12 bg-gray-200 dark:bg-midnight-700 rounded"></div>
                    </div>
                  </div>
                </div>
              ))
            ) : recentOrders.length === 0 ? (
              <div className="p-10 text-center">
                <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center">
                  <FaBox className="text-purple-500 dark:text-purple-400 text-xl" />
                </div>
                <p className="text-base text-gray-500 dark:text-stone-400 mb-3">No active orders at the moment</p>
                <Link 
                  to="/dashboard/orders" 
                  className="mt-2 inline-block px-6 py-2.5 bg-gradient-to-r from-purple-500 to-purple-700 hover:from-purple-600 hover:to-purple-800 text-white text-sm font-medium rounded-lg transition-colors shadow-sm"
                >
                  Create an order
                </Link>
              </div>
            ) : (
              recentOrders.map((order) => (
                <div 
                  onClick={() => {
                    setSelectedOrder(order);
                    setIsOrderModalOpen(true);
                  }}
                  key={order.id} 
                  className="block p-3 m-2 rounded-xl bg-white dark:bg-midnight-800/50 hover:bg-purple-50 dark:hover:bg-midnight-700/40 transition-all border border-gray-100 dark:border-stone-700/10 shadow-sm hover:shadow-md cursor-pointer"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900/30 dark:to-purple-800/10 flex items-center justify-center shadow-sm">
                        <FaBox className="text-purple-600 dark:text-purple-400" />
                      </div>
                      <div className="min-w-0">
                        <h3 className="text-sm font-medium text-gray-900 dark:text-white truncate">
                          {order.services?.name || 'Package Delivery'}
                        </h3>
                        <div className="flex items-center gap-1.5 text-xs text-gray-500 dark:text-stone-400 mt-1">
                          <FaMapMarkerAlt className="text-xs text-purple-500 dark:text-purple-400" />
                          <span className="truncate max-w-[180px]">{order.pickup_location || 'Location unavailable'}</span>
                        </div>
                      </div>
                    </div>
                    <div className="flex flex-col items-end">
                      <span className={`text-xs px-2.5 py-1 rounded-full font-medium mb-1 ${getStatusClasses(order.status)}`}>
                        {order.status.charAt(0).toUpperCase() + order.status.slice(1).replace('_', ' ')}
                      </span>
          </div>
        </div>
      ))
    )}
  </div>
</div>
</div>

{/* Recent Orders */}
<motion.div
  initial={{ opacity: 0, y: 10 }}
  animate={{ opacity: 1, y: 0, transition: { delay: 0.3 } }}
  className="bg-white dark:bg-midnight-800 rounded-xl shadow-md border border-gray-100 dark:border-stone-700/10 overflow-hidden mt-4"
>
  <div className="flex justify-between items-center p-4 border-b border-gray-100 dark:border-stone-700/10">
    <div className="flex items-center gap-2">
      <div className="w-6 h-6 rounded-full bg-gradient-to-r from-purple-500 to-purple-700 flex items-center justify-center shadow-sm">
        <FaBox className="text-white text-xs" />
      </div>
      <h2 className="text-base font-semibold text-gray-900 dark:text-white">In Progress Orders</h2>
    </div>
    <Link 
      to="/dashboard/orders" 
      className="text-xs px-3 py-1 rounded-full bg-purple-100 dark:bg-purple-900/20 text-purple-600 dark:text-purple-300 hover:bg-purple-200 dark:hover:bg-purple-900/30 flex items-center gap-1 transition-colors"
    >
      View All
      <FaArrowRight className="text-[10px]" />
    </Link>
  </div>
  
  <div className="p-2">
    {isLoadingOrders ? (
      Array.from({ length: 2 }).map((_, idx) => (
        <div key={idx} className="p-3 m-2 animate-pulse rounded-xl bg-gray-50 dark:bg-midnight-700/20 border border-gray-100 dark:border-stone-700/10">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 rounded-lg bg-gray-200 dark:bg-midnight-700"></div>
              <div>
                <div className="h-3.5 w-32 bg-gray-200 dark:bg-midnight-700 rounded mb-2"></div>
                <div className="h-2.5 w-24 bg-gray-200 dark:bg-midnight-700 rounded"></div>
              </div>
            </div>
            <div className="flex flex-col items-end">
              <div className="h-4 w-16 bg-gray-200 dark:bg-midnight-700 rounded-full mb-2"></div>
              <div className="h-2.5 w-12 bg-gray-200 dark:bg-midnight-700 rounded"></div>
            </div>
          </div>
        </div>
      ))
    ) : recentOrders.length === 0 ? (
      <div className="p-10 text-center">
        <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center">
          <FaBox className="text-purple-500 dark:text-purple-400 text-xl" />
        </div>
        <p className="text-base text-gray-500 dark:text-stone-400 mb-3">No active orders at the moment</p>
        <Link 
          to="/dashboard/orders" 
          className="mt-2 inline-block px-6 py-2.5 bg-gradient-to-r from-purple-500 to-purple-700 hover:from-purple-600 hover:to-purple-800 text-white text-sm font-medium rounded-lg transition-colors shadow-sm"
        >
          Create an order
        </Link>
      </div>
    ) : (
      recentOrders.map((order) => (
        <div 
          onClick={() => {
            setSelectedOrder(order);
            setIsOrderModalOpen(true);
      {/* Order Details Modal */}
      {selectedOrder && (
        <Dialog
          open={isOrderModalOpen}
          onClose={() => setIsOrderModalOpen(false)}
          fullWidth
          maxWidth="md"
          PaperProps={{
            style: {
              borderRadius: '12px',
              overflow: 'hidden',
              backgroundColor: 'transparent'
            }
          }}
        >
          <DialogContent style={{ padding: 0, backgroundColor: 'transparent' }}>
            <OrderDetailsView 
              order={{
                ...selectedOrder,
                price: selectedOrder.estimated_price || 0,
                payment_status: 'paid'
              }}
              service={{
                id: selectedOrder.service_id,
                name: selectedOrder.services?.name || 'Delivery Service',
                type: 'delivery',
                description: 'Package delivery service',
                minPrice: selectedOrder.estimated_price || 0,
                image: '',
                theme: {
                  bg: 'bg-purple-100',
                  text: 'text-purple-800',
                  border: 'border-purple-300'
                }
              }}
              showUserDetails={false}
              isDriver={false}
            />
          </DialogContent>
        </Dialog>
      )}
    );
  };
export default DashIndex;
